namespace IBApi.Interfaces
{
    public interface IWrapper
    {
        void Error(Exception e);
        void Error(string str);
        void Error(int id, long errorTime, int errorCode, string errorMsg, string advancedOrderRejectJson);
        void CurrentTime(long time);
        void TickPrice(int tickerId, int field, double price, TickAttrib attribs);
        void TickSize(int tickerId, int field, decimal size);
        void TickString(int tickerId, int field, string value);
        void TickGeneric(int tickerId, int field, double value);
        void TickEFP(int tickerId, int tickType, double basisPoints, string formattedBasisPoints, double impliedFuture, int holdDays, string futureLastTradeDate, double dividendImpact, double dividendsToLastTradeDate);
        void DeltaNeutralValidation(int reqId, DeltaNeutralContract deltaNeutralContract);
        void TickOptionComputation(int tickerId, int field, int tickAttrib, double impliedVolatility, double delta, double optPrice, double pvDividend, double gamma, double vega, double theta, double undPrice);
        void TickSnapshotEnd(int tickerId);
        void NextValidId(int orderId);
        void ManagedAccounts(string accountsList);
        void ConnectionClosed();
        void AccountSummary(int reqId, string account, string tag, string value, string currency);
        void AccountSummaryEnd(int reqId);
        void BondContractDetails(int reqId, ContractDetails contract);
        void UpdateAccountValue(string key, string value, string currency, string accountName);
        void UpdatePortfolio(Contract contract, decimal position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, string accountName);
        void UpdateAccountTime(string timestamp);
        void AccountDownloadEnd(string account);
        void OrderStatus(int orderId, string status, decimal filled, decimal remaining, double avgFillPrice, long permId, int parentId, double lastFillPrice, int clientId, string whyHeld, double mktCapPrice);
        void OpenOrder(int orderId, Contract contract, Order order, OrderState orderState);
        void OpenOrderEnd();
        void ContractDetails(int reqId, ContractDetails contractDetails);
        void ContractDetailsEnd(int reqId);
        void ExecDetails(int reqId, Contract contract, Execution execution);
        void ExecDetailsEnd(int reqId);
        void CommissionAndFeesReport(CommissionAndFeesReport commissionAndFeesReport);
        void FundamentalData(int reqId, string data);
        void HistoricalData(int reqId, Bar bar);
        void HistoricalDataUpdate(int reqId, Bar bar);
        void HistoricalDataEnd(int reqId, string start, string end);
        void MarketDataType(int reqId, int marketDataType);
        void UpdateMktDepth(int tickerId, int position, int operation, int side, double price, decimal size);
        void UpdateMktDepthL2(int tickerId, int position, string marketMaker, int operation, int side, double price, decimal size, bool isSmartDepth);
        void UpdateNewsBulletin(int msgId, int msgType, string message, string origExchange);
        void Position(string account, Contract contract, decimal pos, double avgCost);
        void PositionEnd();
        void RealtimeBar(int reqId, long date, double open, double high, double low, double close, decimal volume, decimal WAP, int count);
        void ScannerParameters(string xml);
        void ScannerData(int reqId, int rank, ContractDetails contractDetails, string distance, string benchmark, string projection, string legsStr);
        void ScannerDataEnd(int reqId);
        void ReceiveFA(int faDataType, string faXmlData);
        void VerifyMessageAPI(string apiData);
        void VerifyCompleted(bool isSuccessful, string errorText);
        void VerifyAndAuthMessageAPI(string apiData, string xyzChallenge);
        void VerifyAndAuthCompleted(bool isSuccessful, string errorText);
        void DisplayGroupList(int reqId, string groups);
        void DisplayGroupUpdated(int reqId, string contractInfo);
        void ConnectAck();
        void PositionMulti(int requestId, string account, string modelCode, Contract contract, decimal pos, double avgCost);
        void PositionMultiEnd(int requestId);
        void AccountUpdateMulti(int requestId, string account, string modelCode, string key, string value, string currency);
        void AccountUpdateMultiEnd(int requestId);
        void SecurityDefinitionOptionParameter(int reqId, string exchange, int underlyingConId, string tradingClass, string multiplier, HashSet<string> expirations, HashSet<double> strikes);
        void SecurityDefinitionOptionParameterEnd(int reqId);
        void SoftDollarTiers(int reqId, SoftDollarTier[] tiers);
        void FamilyCodes(FamilyCode[] familyCodes);
        void SymbolSamples(int reqId, ContractDescription[] contractDescriptions);
        void MktDepthExchanges(DepthMktDataDescription[] depthMktDataDescriptions);
        void TickNews(int tickerId, long timeStamp, string providerCode, string articleId, string headline, string extraData);
        void SmartComponents(int reqId, Dictionary<int, KeyValuePair<string, char>> theMap);
        void TickReqParams(int tickerId, double minTick, string bboExchange, int snapshotPermissions);
        void NewsProviders(NewsProvider[] newsProviders);
        void NewsArticle(int requestId, int articleType, string articleText);
        void HistoricalNews(int requestId, string time, string providerCode, string articleId, string headline);
        void HistoricalNewsEnd(int requestId, bool hasMore);
        void HeadTimestamp(int reqId, string headTimestamp);
        void HistogramData(int reqId, HistogramEntry[] data);
        void RerouteMktDataReq(int reqId, int conId, string exchange);
        void RerouteMktDepthReq(int reqId, int conId, string exchange);
        void MarketRule(int marketRuleId, PriceIncrement[] priceIncrements);
        void Pnl(int reqId, double dailyPnL, double unrealizedPnL, double realizedPnL);
        void PnlSingle(int reqId, decimal pos, double dailyPnL, double unrealizedPnL, double realizedPnL, double value);
        void HistoricalTicks(int reqId, HistoricalTick[] ticks, bool done);
        void HistoricalTicksBidAsk(int reqId, HistoricalTickBidAsk[] ticks, bool done);
        void HistoricalTicksLast(int reqId, HistoricalTickLast[] ticks, bool done);
        void TickByTickAllLast(int reqId, int tickType, long time, double price, decimal size, TickAttribLast tickAttribLast, string exchange, string specialConditions);
        void TickByTickBidAsk(int reqId, long time, double bidPrice, double askPrice, decimal bidSize, decimal askSize, TickAttribBidAsk tickAttribBidAsk);
        void TickByTickMidPoint(int reqId, long time, double midPoint);
        void OrderBound(long permId, int clientId, int orderId);
        void CompletedOrder(Contract contract, Order order, OrderState orderState);
        void CompletedOrdersEnd();
        void ReplaceFAEnd(int reqId, string text);
        void WshMetaData(int reqId, string dataJson);
        void WshEventData(int reqId, string dataJson);
        void HistoricalSchedule(int reqId, string startDateTime, string endDateTime, string timeZone, HistoricalSession[] sessions);
        void UserInfo(int reqId, string whiteBrandingId);
        void CurrentTimeInMillis(long timeInMillis);
    }
}
